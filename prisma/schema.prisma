generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  userSettings  UserSettings?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Review {
  id             String      @id @default(cuid())
  userId         String
  owner          String
  repo           String
  prNumber       Int
  prTitle        String
  reviewType     ReviewType
  status         ReviewStatus @default(PENDING)
  critical       Json?
  suggestions    Json?
  bestPractices  Json?
  labelAdded     Boolean     @default(false)
  commentAdded   Boolean     @default(false)
  filesChanged   Int?
  linesAdded     Int?
  linesRemoved   Int?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  completedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum ReviewType {
  BACKEND
  FRONTEND
  MOBILE
}

enum ReviewStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  language              String   @default("en") // "en" or "tr"
  claudeApiKey          String?  @db.Text // Encrypted
  supabaseUrl           String?  @db.Text
  supabaseAnonKey       String?  @db.Text
  supabaseServiceKey    String?  @db.Text
  backendPrompt         String?  @db.Text
  frontendPrompt        String?  @db.Text
  mobilePrompt          String?  @db.Text
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}
